<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction :: CIS 598 Textbook</title><link>https://textbooks.cs.ksu.edu/cis598/0-introduction/index.html</link><description>Welcome to CIS 598!</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://textbooks.cs.ksu.edu/cis598/0-introduction/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring 2025 Syllabus</title><link>https://textbooks.cs.ksu.edu/cis598/0-introduction/01-syllabus/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis598/0-introduction/01-syllabus/index.html</guid><description>CIS 596 - Entrepreneurial Computer Science Project - Spring 2025 CIS 598 - Computer Science Project - Spring 2025 Previous Versions
Instructor Contact Information Instructor: Dr. Scott DeLoach (sdeloach AT ksu DOT edu) Office: DUE 2184 Phone: (785) 532-6350 Website: https://people.cs.ksu.edu/~sdeloach/ Office Hours: TBA
Instructor: Russell Feldhausen (russfeld AT ksu DOT edu)
I use he/him pronouns. Feel free to share your own pronouns with me, and I’ll do my best to use them! Office: DUE 2213, but I mostly work remotely from Kansas City, MO Phone: (785) 292-3121 (Call/Text) Website: https://russfeld.me Virtual Office Hours: By appointment via Zoom. Schedule a meeting at https://calendly.com/russfeld Preferred Methods of Communication: Email: Students should email questions directly to the instructors. We will try to respond within one business day. Chat: You may find instructors online via the CS department Discord server and Microsoft Teams. We will try to respond when we can, but if you don’t get a response please email us. Phone/Text: Emergencies only! We will do our best to respond as quickly as we can. Prerequisites CIS 596: CIS 560, ENTRP 340 and senior standing in computer science. Students may enroll in CIS courses only if they have earned a grade of C or better for each prerequisite to those courses. CIS 598: CIS 560 and senior standing in computer science. Students may enroll in CIS courses only if they have earned a grade of C or better for each prerequisite to those courses. Course Overview Directed studies: selection, investigation and report on some topic not covered in prior courses; may include an implementation and/or experimentation component; may be done in collaboration with other students. Completion of a final report with literature review and project evaluation.</description></item><item><title>Getting Started</title><link>https://textbooks.cs.ksu.edu/cis598/0-introduction/02-getting-started/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis598/0-introduction/02-getting-started/index.html</guid><description>Slides
The major outcome for this course is a project that demonstrates your skills in computer science, software development, and other areas relevant to your chosen degree program. This page provides an overview that will help you get started on your project.
Research Topic Starting in Spring 2023, we now have a special track for topics that fall generally under the heading of “research” instead of a software development project. This includes projects that may have a significant experimental component where the focus is less on developing a software project and more about creating software to support a research task. If you feel that your project fits this description, you should skip to the Research Topic page.</description></item><item><title>Weekly Work</title><link>https://textbooks.cs.ksu.edu/cis598/0-introduction/02-weekly-work/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis598/0-introduction/02-weekly-work/index.html</guid><description>Every two weeks throughout the semester, you are expected to do the following:
Meet with your project advisor, either in person or via Zoom, to provide them with a clear update on your project. Ideally, you should be showing them code or working prototypes, not just a quick verbal update. They are here to provide help but need to know exactly what is going on in your project. Discuss issues, questions, and next steps with your advisor during the meeting. Record the time worked on the project and tasks completed in Clockify. You should record your time at least weekly, but we encourage you to record time on a daily basis. Update the task board for your project in GitHub. Commit your current code to the GitHub Classroom repository for your project. You may also use a secondary repository if you would like, but your code must be accessible in the GitHub Classroom repository unless other arrangements have been made (i.e. you are working on a project for a company and storing the code in their systems). Fill out the biweekly survey before the due date.</description></item><item><title>Presentation 1</title><link>https://textbooks.cs.ksu.edu/cis598/0-introduction/03-presentation-1/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis598/0-introduction/03-presentation-1/index.html</guid><description>During the first half of the semester, each student will be scheduled to give a Overview &amp; Requirements Presentation related to the project.
Presentation Outline The presentation should be roughly 8 minutes in length, and cover the following topics:
A brief overview of the project. NEW A small set (2-3) of top level use cases for the project. These use cases should clearly lead to the requirements in the next bullet point. These use cases will inform the testing plan in the next presentation. A discussion of the requirements for each phase of the project. These requirements will inform the overall design of the project in the next presentation. A proposed timeline for project completion. The first three items roughly correspond to the two initial artifacts discussed on the previous page. The timeline should give rough estimates on when each feature or group of features should be completed.</description></item><item><title>Presentation 2</title><link>https://textbooks.cs.ksu.edu/cis598/0-introduction/04-presentation-2/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis598/0-introduction/04-presentation-2/index.html</guid><description>During the second half of the semester, each student will be scheduled to give a Design Presentation related to the project.
Presentation Outline The presentation should be roughly 8 minutes in length, and cover the following topics:
The chosen design for the project. The chosen design should clearly reflect the overall requirements listed in the previous presentation. A deep overview of design diagrams relevant to the project: UML Diagrams (Class Diagrams, Sequence Diagrams, etc.) Database Entity Relationship Diagrams API Documentation Diagrams UI Mockups &amp; Diagrams Sitemaps for Websites A discussion of how the project will be tested NEW These tests should clearly align with the use cases listed in the first presentation. Presentation Diagrams While the focus of this presentation is the design of your project, you don’t need to include an excruciating level of detail in your design diagrams. This makes them very difficult to see and understand in your presentation, and represents a large amount of unnecessary effort on your part. Some suggestions:</description></item><item><title>Final Presentation</title><link>https://textbooks.cs.ksu.edu/cis598/0-introduction/05-final-presentation/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis598/0-introduction/05-final-presentation/index.html</guid><description>At the end of the semester, each student will give a public Final Presentation that presents all aspects of the completed project.
Overview The presentation should be roughly 30-45 minutes in length, and cover all aspects of the project. A recommended outline is below:
Introduction Background &amp; Related Work Project Requirements Design Documents Project Implementation (Languages, Frameworks, Code Structure) Testing &amp; Evaluation Packaging &amp; Deployment (if applicable) Live Demo Future Work Conclusion Q&amp;A Scheduling Final presentations are typically scheduled during the last week of the semester (sometimes referred to as “dead week”) or finals week. You should schedule your presentation in consultation with your advisor, since they are required to attend and grade your project.</description></item><item><title>Final Artifacts</title><link>https://textbooks.cs.ksu.edu/cis598/0-introduction/06-artifacts/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis598/0-introduction/06-artifacts/index.html</guid><description>At the end of the semester, you’ll need to submit all of your project artifacts and information for grading. Here is a helpful checklist of everything that should be submitted:
Initial Writeup &amp; Feature List (collected via Canvas early in the semester) First Presentation (collected via Canvas when it was presented) Second Presentation (collected via Canvas when it was presented) Advertisement Materials (collected via Canvas before final presentation) All Code &amp; Related Resources Pushed to GitHub Classroom Repository Repository should include a README.md that briefly describes how to compile/run/use the project. Repository should also include final presentation materials (slides, etc.) Completed Time Log (collected via Canvas at the end of the semester) Completed Release Information (collected via Canvas at the end of the semester) Your advisor will also submit feedback on your final project presentation and artifacts. The course instructors will reach out to advisors to collect this information, so students don’t have to do anything for this step.</description></item><item><title>Research Project</title><link>https://textbooks.cs.ksu.edu/cis598/0-introduction/07-research/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis598/0-introduction/07-research/index.html</guid><description>This course includes a special project track for projects that are considered more “research” than purely software development. Some examples:
Exploring how to use artificial intelligence to play a simulated game or recognize images Developing a software tool to interface with lab equipment that requires a large amount of trial and error Writing a tool that uses data science techniques to analyze data and answer a question or hypothesis Developing a new educational software tool, where the major focus of the project is collecting user feedback and analyzing results to continuously improve the software. To be truly considered research, your project generally must conform to these requirements:</description></item></channel></rss>